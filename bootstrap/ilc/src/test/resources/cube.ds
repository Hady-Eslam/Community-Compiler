extern {
	fn glutInitDisplayMode(a: i32);
	fn glutGet(e: i32);
	fn glutInitWindowSize(w: i32, h: i32);
	fn glutInitWindowPosition(x: i32, y: i32);
	fn glutCreateWindow(name: str);

	fn glClearColor(r: f32, g: f32, b: f32, a: f32);
	fn glRotatef(r: f32, g: f32, b: f32, a: f32);
	fn glTranslatef(r: f32, g: f32, b: f32);
	fn glVertex3f(r: f32, g: f32, b: f32);
	fn glColor3f(r: f32, g: f32, b: f32);
	fn glEnable(e: i32);
	fn glClear(e: i32);
	fn glBegin(e: i32);

	fn gluPerspective(r: f64, g: f64, b: f64, a: f64);

	fn glutDisplayFunc(x: fn);
	fn glutMainLoop();

	fn glEnd();
    fn glFlush();
    fn glutSwapBuffers();
    fn glutPostRedisplay();
}

// LARG 4; ADRA 0; CALL glutInit; DELE
// ???
glutInit(0, 0);

glutInitDisplayMode(2);

glutInitWindowSize(1280, 720);

let windowX = (glutGet(201) - 720) / 2;
let windowY = (gluGet(200) - 1280) / 2;

glutInitWindowPosition(windowX, windowY);

glutCreateWindow("Test");
glClearColor(0, 0, 0, 0);

glEnable(2929);
gluPerspective(85.0, 1.777777, 0.1, 100.0);

glTranslatef(0, 0, -5);
glutDisplayFunc(display);
glutMainLoop();

// return; ?

fn display() {
	glClear(16384 | 256);

	glRotatef(1, 1, 1, 1);

	glBegin(7);

	glColor3f(0.4, 0.4, 0.4);
	glVertex3f(-1, -1, -1);
	glVertex3f(1, -1, -1);
	glVertex3f(1, 1, -1);
	glVertex3f(-1, 1, -1);

	glColor3f(1, 1, 1);
	glVertex3f(-1, -1, 1);
	glVertex3f(1, -1, 1);
	glVertex3f(1, 1, 1);
	glVertex3f(-1, 1, 1);

	glColor3f(0.8, 0.8, 0.8);
	glVertex3f(-1, -1, -1);
	glVertex3f(-1, 1, -1);
	glVertex3f(-1, 1, 1);
	glVertex3f(-1, -1, 1);

	glColor3f(0.8, 0.8, 0.8);
	glVertex3f(1, -1, -1);
	glVertex3f(1, 1, -1);
	glVertex3f(1, 1, 1);
	glVertex3f(1, -1, 1);

	glColor3f(0.6, 0.6, 0.6);
	glVertex3f(-1, -1, -1);
	glVertex3f(1, -1, -1);
	glVertex3f(1, -1, 1);
	glVertex3f(-1, -1, 1);

	glColor3f(0.6, 0.6, 0.6);
	glVertex3f(-1, 1, -1);
	glVertex3f(1, 1, -1);
	glVertex3f(1, 1, 1);
	glVertex3f(-1, 1, 1);

	glEnd();
	glFlush();
	glutSwapBuffers();
	glutPostRedisplay();

	// return; ?
}