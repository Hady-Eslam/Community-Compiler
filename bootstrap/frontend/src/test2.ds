main();

extern {
    //stdio.h
    fn putchar(ch: u8) : i32;
    fn getchar(): i32;

    //stdlib.h
    fn malloc(size: u32) : u32;
    fn free(ptr: u32);
}

//il code
@il("load.arg $offset")
extern fn loadArg(offset: u32);

@il("add")
extern fn add();

//math
//@inline()
infix op +(self: u32, other : u32) : u32 {
    loadArg(0);
    loadArg(4);
    add();
}

suffix op ++(self: u32): u32 {
    let result = self;
    self = self + 1;
    return result;
}

//string lib

struct str {
    length: u32
    chars: u8[]
}

impl str {
    infix op +(other: str): str {
        let resultChars = u8[length + other.length];

        var c = 0;

        //first string
        loop(self.length) {
            resultChars[c] = self.chars[c++];
        }

        //second string
        loop(other.length) {
            resultChars[c] = other.chars[c++];
        }

        return str(length + other.length, resultChars);
    }
}


//terminal lib
struct Terminal {
    x: u16
    y: u16
}

let terminal = Terminal();

impl Terminal {
    fn print(ch: u8) {
        putchar(ch);
    }

    fn print(string: str) {
        loop(ch in string.chars) {
            print(ch);
        }
    }

    fn println(string: str) {
        print(string);
        print("\n");
    }

    fn clear() {
        print("\033[H\033[J");
    }

    fn setPos(x: u16, y: u16) {
        //print("\033[" + x + ";" y + "H");
    }
}

fn main() {

    terminal.setPos(10, 10);
    terminal.println("Hello world!");

    assignmentTest();
}

//testing
fn assignmentTest() {
    let a = "This is a test";
    a = "`a` should not be reassignable";

    var b = 53;
    b = 3;
    b = "This should be invalid.";
}
